package exporter

import (
	"context"
	"crypto/tls"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/Khan/genqlient/graphql"
)

type exporter struct {
	AcsToken    string
	MetricsPort string
	gqlClient   graphql.Client
}

type bearerTokenTransport struct {
	Base  http.RoundTripper
	Token string
}

// RoundTrip is defined within http.RoundTripper and implemented here for bearer token auth usage
func (t *bearerTokenTransport) RoundTrip(req *http.Request) (*http.Response, error) {
	// Clone the request to avoid modifying the original request
	clonedReq := req.Clone(req.Context())
	clonedReq.Header.Set("Authorization", fmt.Sprintf("Bearer %s", t.Token))
	return t.Base.RoundTrip(clonedReq)
}

func NewExporter(endpoint, token, metricsPort string) *exporter {
	transport := &bearerTokenTransport{
		Base: &http.Transport{
			TLSClientConfig: &tls.Config{
				MinVersion: tls.VersionTLS13,
			},
		},
		Token: token,
	}
	httpClient := http.Client{
		Transport: transport,
		Timeout:   time.Second * 5,
	}
	return &exporter{
		AcsToken: token,
		gqlClient: graphql.NewClient(
			fmt.Sprintf("%s/api/graphql", endpoint), &httpClient),
		MetricsPort: metricsPort,
	}
}

func (e *exporter) Run() {
	for {
		log.Println("Beginning collection from ACS...")
		ctx := context.Background()
		e.collect(ctx)
		log.Println("Collection completed. Sleeping for 5 minutes")
		time.Sleep(5 * time.Minute) // TODO: allow config in env var
	}

}
